{"cells":[{"cell_type":"code","execution_count":1,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"elapsed":27041,"status":"ok","timestamp":1614488923088,"user":{"displayName":"Guys Users","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GjPDLTE2xq9CHYxzYfOVoXbFT7HwhIJa5bkbk16=s64","userId":"03786715776420508747"},"user_tz":-420},"id":"VJBip-Gt4gKQ","outputId":"4ce4e719-c54e-4ce1-857b-b7cfa8b4d877"},"outputs":[{"name":"stdout","output_type":"stream","text":["\u001b[K     |████████████████████████████████| 3.4MB 4.9MB/s \n","\u001b[K     |████████████████████████████████| 1.1MB 6.5MB/s \n","\u001b[K     |████████████████████████████████| 51kB 5.0MB/s \n","\u001b[K     |████████████████████████████████| 102kB 7.0MB/s \n","\u001b[K     |████████████████████████████████| 1.2MB 15.8MB/s \n","\u001b[K     |████████████████████████████████| 358kB 27.9MB/s \n","\u001b[K     |████████████████████████████████| 174kB 30.9MB/s \n","\u001b[K     |████████████████████████████████| 706kB 26.1MB/s \n","\u001b[K     |████████████████████████████████| 645kB 22.4MB/s \n","\u001b[K     |████████████████████████████████| 37.6MB 95kB/s \n","\u001b[?25h  Building wheel for seqeval (setup.py) ... \u001b[?25l\u001b[?25hdone\n","  Building wheel for py-cpuinfo (setup.py) ... \u001b[?25l\u001b[?25hdone\n","Collecting tfds-nightly\n","\u001b[?25l  Downloading https://files.pythonhosted.org/packages/cf/43/83a554ba7679b00faf283204e5fb603eb378e098c64008bafe7e73f3371a/tfds_nightly-4.2.0.dev202102270106-py3-none-any.whl (3.8MB)\n","\u001b[K     |████████████████████████████████| 3.8MB 6.6MB/s \n","\u001b[?25hRequirement already satisfied, skipping upgrade: six in /usr/local/lib/python3.7/dist-packages (from tfds-nightly) (1.15.0)\n","Requirement already satisfied, skipping upgrade: importlib-resources; python_version \u003c \"3.9\" in /usr/local/lib/python3.7/dist-packages (from tfds-nightly) (5.1.0)\n","Requirement already satisfied, skipping upgrade: termcolor in /usr/local/lib/python3.7/dist-packages (from tfds-nightly) (1.1.0)\n","Requirement already satisfied, skipping upgrade: numpy in /usr/local/lib/python3.7/dist-packages (from tfds-nightly) (1.19.5)\n","Requirement already satisfied, skipping upgrade: promise in /usr/local/lib/python3.7/dist-packages (from tfds-nightly) (2.3)\n","Requirement already satisfied, skipping upgrade: absl-py in /usr/local/lib/python3.7/dist-packages (from tfds-nightly) (0.10.0)\n","Requirement already satisfied, skipping upgrade: typing-extensions; python_version \u003c \"3.8\" in /usr/local/lib/python3.7/dist-packages (from tfds-nightly) (3.7.4.3)\n","Requirement already satisfied, skipping upgrade: attrs\u003e=18.1.0 in /usr/local/lib/python3.7/dist-packages (from tfds-nightly) (20.3.0)\n","Requirement already satisfied, skipping upgrade: protobuf\u003e=3.12.2 in /usr/local/lib/python3.7/dist-packages (from tfds-nightly) (3.12.4)\n","Requirement already satisfied, skipping upgrade: tensorflow-metadata in /usr/local/lib/python3.7/dist-packages (from tfds-nightly) (0.28.0)\n","Requirement already satisfied, skipping upgrade: future in /usr/local/lib/python3.7/dist-packages (from tfds-nightly) (0.16.0)\n","Requirement already satisfied, skipping upgrade: tqdm in /usr/local/lib/python3.7/dist-packages (from tfds-nightly) (4.41.1)\n","Requirement already satisfied, skipping upgrade: requests\u003e=2.19.0 in /usr/local/lib/python3.7/dist-packages (from tfds-nightly) (2.23.0)\n","Requirement already satisfied, skipping upgrade: dill in /usr/local/lib/python3.7/dist-packages (from tfds-nightly) (0.3.3)\n","Requirement already satisfied, skipping upgrade: zipp\u003e=0.4; python_version \u003c \"3.8\" in /usr/local/lib/python3.7/dist-packages (from importlib-resources; python_version \u003c \"3.9\"-\u003etfds-nightly) (3.4.0)\n","Requirement already satisfied, skipping upgrade: setuptools in /usr/local/lib/python3.7/dist-packages (from protobuf\u003e=3.12.2-\u003etfds-nightly) (53.0.0)\n","Requirement already satisfied, skipping upgrade: googleapis-common-protos\u003c2,\u003e=1.52.0 in /usr/local/lib/python3.7/dist-packages (from tensorflow-metadata-\u003etfds-nightly) (1.52.0)\n","Requirement already satisfied, skipping upgrade: certifi\u003e=2017.4.17 in /usr/local/lib/python3.7/dist-packages (from requests\u003e=2.19.0-\u003etfds-nightly) (2020.12.5)\n","Requirement already satisfied, skipping upgrade: idna\u003c3,\u003e=2.5 in /usr/local/lib/python3.7/dist-packages (from requests\u003e=2.19.0-\u003etfds-nightly) (2.10)\n","Requirement already satisfied, skipping upgrade: chardet\u003c4,\u003e=3.0.2 in /usr/local/lib/python3.7/dist-packages (from requests\u003e=2.19.0-\u003etfds-nightly) (3.0.4)\n","Requirement already satisfied, skipping upgrade: urllib3!=1.25.0,!=1.25.1,\u003c1.26,\u003e=1.21.1 in /usr/local/lib/python3.7/dist-packages (from requests\u003e=2.19.0-\u003etfds-nightly) (1.24.3)\n","Installing collected packages: tfds-nightly\n","Successfully installed tfds-nightly-4.2.0.dev202102270106\n"]}],"source":["!pip install -q -U tensorflow-text\r\n","!pip install -q -U tf-models-official\r\n","!pip install -U tfds-nightly"]},{"cell_type":"code","execution_count":2,"metadata":{"executionInfo":{"elapsed":29430,"status":"ok","timestamp":1614488925487,"user":{"displayName":"Guys Users","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GjPDLTE2xq9CHYxzYfOVoXbFT7HwhIJa5bkbk16=s64","userId":"03786715776420508747"},"user_tz":-420},"id":"_Gjdotxj4wPX"},"outputs":[],"source":["import os\r\n","import tensorflow as tf\r\n","import tensorflow_hub as hub\r\n","import tensorflow_datasets as tfds\r\n","import tensorflow_text as text  # A dependency of the preprocessing model\r\n","import tensorflow_addons as tfa\r\n","from official.nlp import optimization\r\n","import numpy as np"]},{"cell_type":"code","execution_count":3,"metadata":{"executionInfo":{"elapsed":29425,"status":"ok","timestamp":1614488925494,"user":{"displayName":"Guys Users","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GjPDLTE2xq9CHYxzYfOVoXbFT7HwhIJa5bkbk16=s64","userId":"03786715776420508747"},"user_tz":-420},"id":"j4Vaq2RY4-L7"},"outputs":[],"source":["# Read checkpoint direct from cloud\r\n","os.environ[\"TFHUB_MODEL_LOAD_FORMAT\"] = \"UNCOMPRESSED\""]},{"cell_type":"code","execution_count":null,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"XMi_xkXV5KTt","outputId":"0b7ab572-9611-48d3-edc1-2681ae626ffe"},"outputs":[{"name":"stdout","output_type":"stream","text":["INFO:tensorflow:Initializing the TPU system: grpc://10.96.68.194:8470\n"]},{"name":"stderr","output_type":"stream","text":["INFO:tensorflow:Initializing the TPU system: grpc://10.96.68.194:8470\n"]}],"source":["if os.environ['COLAB_TPU_ADDR']:\r\n","    cluster_resolver = tf.distribute.cluster_resolver.TPUClusterResolver(tpu='grpc://' + os.environ['COLAB_TPU_ADDR'])\r\n","    tf.config.experimental_connect_to_cluster(cluster_resolver)\r\n","    tf.tpu.experimental.initialize_tpu_system(cluster_resolver)\r\n","    strategy = tf.distribute.TPUStrategy(cluster_resolver)\r\n","    print(\"USING TPU\")\r\n","elif tf.test.is_gpu_available():\r\n","    strategy = tf.distribute.MirroredStrategy()\r\n","    print(\"USING GPU\")\r\n","else:\r\n","    raise ValueError(\"Can not run on CPU\")\r\n","\r\n"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"68p1m5X167V1"},"outputs":[],"source":["bert_model_name = 'bert_en_uncased_L-12_H-768_A-12' \r\n","\r\n","map_name_to_handle = {\r\n","    'bert_en_uncased_L-12_H-768_A-12':\r\n","        'https://tfhub.dev/tensorflow/bert_en_uncased_L-12_H-768_A-12/3',\r\n","    'bert_en_uncased_L-24_H-1024_A-16':\r\n","        'https://tfhub.dev/tensorflow/bert_en_uncased_L-24_H-1024_A-16/3',\r\n","    'bert_en_wwm_uncased_L-24_H-1024_A-16':\r\n","        'https://tfhub.dev/tensorflow/bert_en_wwm_uncased_L-24_H-1024_A-16/3',\r\n","    'bert_en_cased_L-12_H-768_A-12':\r\n","        'https://tfhub.dev/tensorflow/bert_en_cased_L-12_H-768_A-12/3',\r\n","    'bert_en_cased_L-24_H-1024_A-16':\r\n","        'https://tfhub.dev/tensorflow/bert_en_cased_L-24_H-1024_A-16/3',\r\n","    'bert_en_wwm_cased_L-24_H-1024_A-16':\r\n","        'https://tfhub.dev/tensorflow/bert_en_wwm_cased_L-24_H-1024_A-16/3',\r\n","    'bert_multi_cased_L-12_H-768_A-12':\r\n","        'https://tfhub.dev/tensorflow/bert_multi_cased_L-12_H-768_A-12/3',\r\n","    'small_bert/bert_en_uncased_L-2_H-128_A-2':\r\n","        'https://tfhub.dev/tensorflow/small_bert/bert_en_uncased_L-2_H-128_A-2/1',\r\n","    'small_bert/bert_en_uncased_L-2_H-256_A-4':\r\n","        'https://tfhub.dev/tensorflow/small_bert/bert_en_uncased_L-2_H-256_A-4/1',\r\n","    'small_bert/bert_en_uncased_L-2_H-512_A-8':\r\n","        'https://tfhub.dev/tensorflow/small_bert/bert_en_uncased_L-2_H-512_A-8/1',\r\n","    'small_bert/bert_en_uncased_L-2_H-768_A-12':\r\n","        'https://tfhub.dev/tensorflow/small_bert/bert_en_uncased_L-2_H-768_A-12/1',\r\n","    'small_bert/bert_en_uncased_L-4_H-128_A-2':\r\n","        'https://tfhub.dev/tensorflow/small_bert/bert_en_uncased_L-4_H-128_A-2/1',\r\n","    'small_bert/bert_en_uncased_L-4_H-256_A-4':\r\n","        'https://tfhub.dev/tensorflow/small_bert/bert_en_uncased_L-4_H-256_A-4/1',\r\n","    'small_bert/bert_en_uncased_L-4_H-512_A-8':\r\n","        'https://tfhub.dev/tensorflow/small_bert/bert_en_uncased_L-4_H-512_A-8/1',\r\n","    'small_bert/bert_en_uncased_L-4_H-768_A-12':\r\n","        'https://tfhub.dev/tensorflow/small_bert/bert_en_uncased_L-4_H-768_A-12/1',\r\n","    'small_bert/bert_en_uncased_L-6_H-128_A-2':\r\n","        'https://tfhub.dev/tensorflow/small_bert/bert_en_uncased_L-6_H-128_A-2/1',\r\n","    'small_bert/bert_en_uncased_L-6_H-256_A-4':\r\n","        'https://tfhub.dev/tensorflow/small_bert/bert_en_uncased_L-6_H-256_A-4/1',\r\n","    'small_bert/bert_en_uncased_L-6_H-512_A-8':\r\n","        'https://tfhub.dev/tensorflow/small_bert/bert_en_uncased_L-6_H-512_A-8/1',\r\n","    'small_bert/bert_en_uncased_L-6_H-768_A-12':\r\n","        'https://tfhub.dev/tensorflow/small_bert/bert_en_uncased_L-6_H-768_A-12/1',\r\n","    'small_bert/bert_en_uncased_L-8_H-128_A-2':\r\n","        'https://tfhub.dev/tensorflow/small_bert/bert_en_uncased_L-8_H-128_A-2/1',\r\n","    'small_bert/bert_en_uncased_L-8_H-256_A-4':\r\n","        'https://tfhub.dev/tensorflow/small_bert/bert_en_uncased_L-8_H-256_A-4/1',\r\n","    'small_bert/bert_en_uncased_L-8_H-512_A-8':\r\n","        'https://tfhub.dev/tensorflow/small_bert/bert_en_uncased_L-8_H-512_A-8/1',\r\n","    'small_bert/bert_en_uncased_L-8_H-768_A-12':\r\n","        'https://tfhub.dev/tensorflow/small_bert/bert_en_uncased_L-8_H-768_A-12/1',\r\n","    'small_bert/bert_en_uncased_L-10_H-128_A-2':\r\n","        'https://tfhub.dev/tensorflow/small_bert/bert_en_uncased_L-10_H-128_A-2/1',\r\n","    'small_bert/bert_en_uncased_L-10_H-256_A-4':\r\n","        'https://tfhub.dev/tensorflow/small_bert/bert_en_uncased_L-10_H-256_A-4/1',\r\n","    'small_bert/bert_en_uncased_L-10_H-512_A-8':\r\n","        'https://tfhub.dev/tensorflow/small_bert/bert_en_uncased_L-10_H-512_A-8/1',\r\n","    'small_bert/bert_en_uncased_L-10_H-768_A-12':\r\n","        'https://tfhub.dev/tensorflow/small_bert/bert_en_uncased_L-10_H-768_A-12/1',\r\n","    'small_bert/bert_en_uncased_L-12_H-128_A-2':\r\n","        'https://tfhub.dev/tensorflow/small_bert/bert_en_uncased_L-12_H-128_A-2/1',\r\n","    'small_bert/bert_en_uncased_L-12_H-256_A-4':\r\n","        'https://tfhub.dev/tensorflow/small_bert/bert_en_uncased_L-12_H-256_A-4/1',\r\n","    'small_bert/bert_en_uncased_L-12_H-512_A-8':\r\n","        'https://tfhub.dev/tensorflow/small_bert/bert_en_uncased_L-12_H-512_A-8/1',\r\n","    'small_bert/bert_en_uncased_L-12_H-768_A-12':\r\n","        'https://tfhub.dev/tensorflow/small_bert/bert_en_uncased_L-12_H-768_A-12/1',\r\n","    'albert_en_base':\r\n","        'https://tfhub.dev/tensorflow/albert_en_base/2',\r\n","    'albert_en_large':\r\n","        'https://tfhub.dev/tensorflow/albert_en_large/2',\r\n","    'albert_en_xlarge':\r\n","        'https://tfhub.dev/tensorflow/albert_en_xlarge/2',\r\n","    'albert_en_xxlarge':\r\n","        'https://tfhub.dev/tensorflow/albert_en_xxlarge/2',\r\n","    'electra_small':\r\n","        'https://tfhub.dev/google/electra_small/2',\r\n","    'electra_base':\r\n","        'https://tfhub.dev/google/electra_base/2',\r\n","    'experts_pubmed':\r\n","        'https://tfhub.dev/google/experts/bert/pubmed/2',\r\n","    'experts_wiki_books':\r\n","        'https://tfhub.dev/google/experts/bert/wiki_books/2',\r\n","    'talking-heads_base':\r\n","        'https://tfhub.dev/tensorflow/talkheads_ggelu_bert_en_base/1',\r\n","    'talking-heads_large':\r\n","        'https://tfhub.dev/tensorflow/talkheads_ggelu_bert_en_large/1',\r\n","}\r\n","\r\n","map_model_to_preprocess = {\r\n","    'bert_en_uncased_L-24_H-1024_A-16':\r\n","        'https://tfhub.dev/tensorflow/bert_en_uncased_preprocess/3',\r\n","    'bert_en_uncased_L-12_H-768_A-12':\r\n","        'https://tfhub.dev/tensorflow/bert_en_uncased_preprocess/3',\r\n","    'bert_en_wwm_cased_L-24_H-1024_A-16':\r\n","        'https://tfhub.dev/tensorflow/bert_en_cased_preprocess/3',\r\n","    'bert_en_cased_L-24_H-1024_A-16':\r\n","        'https://tfhub.dev/tensorflow/bert_en_cased_preprocess/3',\r\n","    'bert_en_cased_L-12_H-768_A-12':\r\n","        'https://tfhub.dev/tensorflow/bert_en_cased_preprocess/3',\r\n","    'bert_en_wwm_uncased_L-24_H-1024_A-16':\r\n","        'https://tfhub.dev/tensorflow/bert_en_uncased_preprocess/3',\r\n","    'small_bert/bert_en_uncased_L-2_H-128_A-2':\r\n","        'https://tfhub.dev/tensorflow/bert_en_uncased_preprocess/3',\r\n","    'small_bert/bert_en_uncased_L-2_H-256_A-4':\r\n","        'https://tfhub.dev/tensorflow/bert_en_uncased_preprocess/3',\r\n","    'small_bert/bert_en_uncased_L-2_H-512_A-8':\r\n","        'https://tfhub.dev/tensorflow/bert_en_uncased_preprocess/3',\r\n","    'small_bert/bert_en_uncased_L-2_H-768_A-12':\r\n","        'https://tfhub.dev/tensorflow/bert_en_uncased_preprocess/3',\r\n","    'small_bert/bert_en_uncased_L-4_H-128_A-2':\r\n","        'https://tfhub.dev/tensorflow/bert_en_uncased_preprocess/3',\r\n","    'small_bert/bert_en_uncased_L-4_H-256_A-4':\r\n","        'https://tfhub.dev/tensorflow/bert_en_uncased_preprocess/3',\r\n","    'small_bert/bert_en_uncased_L-4_H-512_A-8':\r\n","        'https://tfhub.dev/tensorflow/bert_en_uncased_preprocess/3',\r\n","    'small_bert/bert_en_uncased_L-4_H-768_A-12':\r\n","        'https://tfhub.dev/tensorflow/bert_en_uncased_preprocess/3',\r\n","    'small_bert/bert_en_uncased_L-6_H-128_A-2':\r\n","        'https://tfhub.dev/tensorflow/bert_en_uncased_preprocess/3',\r\n","    'small_bert/bert_en_uncased_L-6_H-256_A-4':\r\n","        'https://tfhub.dev/tensorflow/bert_en_uncased_preprocess/3',\r\n","    'small_bert/bert_en_uncased_L-6_H-512_A-8':\r\n","        'https://tfhub.dev/tensorflow/bert_en_uncased_preprocess/3',\r\n","    'small_bert/bert_en_uncased_L-6_H-768_A-12':\r\n","        'https://tfhub.dev/tensorflow/bert_en_uncased_preprocess/3',\r\n","    'small_bert/bert_en_uncased_L-8_H-128_A-2':\r\n","        'https://tfhub.dev/tensorflow/bert_en_uncased_preprocess/3',\r\n","    'small_bert/bert_en_uncased_L-8_H-256_A-4':\r\n","        'https://tfhub.dev/tensorflow/bert_en_uncased_preprocess/3',\r\n","    'small_bert/bert_en_uncased_L-8_H-512_A-8':\r\n","        'https://tfhub.dev/tensorflow/bert_en_uncased_preprocess/3',\r\n","    'small_bert/bert_en_uncased_L-8_H-768_A-12':\r\n","        'https://tfhub.dev/tensorflow/bert_en_uncased_preprocess/3',\r\n","    'small_bert/bert_en_uncased_L-10_H-128_A-2':\r\n","        'https://tfhub.dev/tensorflow/bert_en_uncased_preprocess/3',\r\n","    'small_bert/bert_en_uncased_L-10_H-256_A-4':\r\n","        'https://tfhub.dev/tensorflow/bert_en_uncased_preprocess/3',\r\n","    'small_bert/bert_en_uncased_L-10_H-512_A-8':\r\n","        'https://tfhub.dev/tensorflow/bert_en_uncased_preprocess/3',\r\n","    'small_bert/bert_en_uncased_L-10_H-768_A-12':\r\n","        'https://tfhub.dev/tensorflow/bert_en_uncased_preprocess/3',\r\n","    'small_bert/bert_en_uncased_L-12_H-128_A-2':\r\n","        'https://tfhub.dev/tensorflow/bert_en_uncased_preprocess/3',\r\n","    'small_bert/bert_en_uncased_L-12_H-256_A-4':\r\n","        'https://tfhub.dev/tensorflow/bert_en_uncased_preprocess/3',\r\n","    'small_bert/bert_en_uncased_L-12_H-512_A-8':\r\n","        'https://tfhub.dev/tensorflow/bert_en_uncased_preprocess/3',\r\n","    'small_bert/bert_en_uncased_L-12_H-768_A-12':\r\n","        'https://tfhub.dev/tensorflow/bert_en_uncased_preprocess/3',\r\n","    'bert_multi_cased_L-12_H-768_A-12':\r\n","        'https://tfhub.dev/tensorflow/bert_multi_cased_preprocess/3',\r\n","    'albert_en_base':\r\n","        'https://tfhub.dev/tensorflow/albert_en_preprocess/2',\r\n","    'albert_en_large':\r\n","        'https://tfhub.dev/tensorflow/albert_en_preprocess/2',\r\n","    'albert_en_xlarge':\r\n","        'https://tfhub.dev/tensorflow/albert_en_preprocess/2',\r\n","    'albert_en_xxlarge':\r\n","        'https://tfhub.dev/tensorflow/albert_en_preprocess/2',\r\n","    'electra_small':\r\n","        'https://tfhub.dev/tensorflow/bert_en_uncased_preprocess/3',\r\n","    'electra_base':\r\n","        'https://tfhub.dev/tensorflow/bert_en_uncased_preprocess/3',\r\n","    'experts_pubmed':\r\n","        'https://tfhub.dev/tensorflow/bert_en_uncased_preprocess/3',\r\n","    'experts_wiki_books':\r\n","        'https://tfhub.dev/tensorflow/bert_en_uncased_preprocess/3',\r\n","    'talking-heads_base':\r\n","        'https://tfhub.dev/tensorflow/bert_en_uncased_preprocess/3',\r\n","    'talking-heads_large':\r\n","        'https://tfhub.dev/tensorflow/bert_en_uncased_preprocess/3',\r\n","}\r\n","\r\n","tfhub_handle_encoder = map_name_to_handle[bert_model_name]\r\n","tfhub_handle_preprocess = map_model_to_preprocess[bert_model_name]\r\n","\r\n","print(f'BERT model selected           : {tfhub_handle_encoder}')\r\n","print(f'Preprocessing model auto-selected: {tfhub_handle_preprocess}')"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"uLdCp-DF8vHM"},"outputs":[],"source":["# Preprocess data\r\n","bert_preprocess = hub.load(tfhub_handle_preprocess)\r\n","token = bert_preprocess.tokenize(tf.constant(['Hello World!']))\r\n","token"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"e8Dg50JQ-N2B"},"outputs":[],"source":["# Take a list of token to create input required by BERT\r\n","text_preprocessed = bert_preprocess.bert_pack_inputs([token, token], tf.constant(20))\r\n","print('Shape Word Ids : ', text_preprocessed['input_word_ids'].shape)\r\n","print('Word Ids       : ', text_preprocessed['input_word_ids'][0, :16])\r\n","print('Shape Mask     : ', text_preprocessed['input_mask'].shape)\r\n","print('Input Mask     : ', text_preprocessed['input_mask'][0, :16])\r\n","print('Shape Type Ids : ', text_preprocessed['input_type_ids'].shape)\r\n","print('Type Ids       : ', text_preprocessed['input_type_ids'][0, :16])"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"2CLafbIa_nMb"},"outputs":[],"source":["def build_bert_preprocess_model(sentence_features, seq_len=256):\r\n","    \"\"\"Returns Model mapping string features to BERT inputs.\r\n","\r\n","    Args:\r\n","      sentence_features: a list with the names of string-valued features.\r\n","      seq_length: an integer that defines the sequence length of BERT inputs.\r\n","\r\n","    Returns:\r\n","      A Keras Model that can be called on a list or dict of string Tensors\r\n","      (with the order or names, resp., given by sentence_features) and\r\n","      returns a dict of tensors for input to BERT.\r\n","    \"\"\"\r\n","    input_segments = [tf.keras.layers.Input(shape=(), dtype=tf.string, name=feature) for feature in sentence_features]\r\n","\r\n","    # Tokenize text to word\r\n","    bert_preprocess = hub.load(tfhub_handle_preprocess)\r\n","    tokenizer = hub.KerasLayer(bert_preprocess.tokenize, name=\"tokenizer\")\r\n","    segments = [tokenizer(s) for s in input_segments]\r\n","\r\n","    # Optional: Trim segments in a smart way to fit seq_length.\r\n","    # Simple cases (like this example) can skip this step and let\r\n","    # the next step apply a default truncation to approximately equal lengths.\r\n","\r\n","    truncated_segments = segments\r\n","\r\n","    # Pack inputs. The details (start/end token ids, dict of output tensors)\r\n","    # are model-dependent, so this gets loaded from the SavedModel.\r\n","    packer = hub.KerasLayer(bert_preprocess.bert_pack_inputs, arguments=dict(seq_length=seq_len), name=\"packer\")\r\n","    model_inputs = packer(truncated_segments)\r\n","\r\n","    # Input bert expected (input_word_id, input_masks, input_type_ids)\r\n","    return tf.keras.Model(input_segments, model_inputs)\r\n"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"R31yzZbRZG82"},"outputs":[],"source":["test_preprocess_model = build_bert_preprocess_model(['my_input1', 'my_input2'])\r\n","test_text = [np.array(['some random test sentence']),\r\n","             np.array(['another sentence'])]\r\n","text_preprocessed = test_preprocess_model(test_text)\r\n","\r\n","print('Keys           : ', list(text_preprocessed.keys()))\r\n","print('Shape Word Ids : ', text_preprocessed['input_word_ids'].shape)\r\n","print('Word Ids       : ', text_preprocessed['input_word_ids'][0, :16])\r\n","print('Shape Mask     : ', text_preprocessed['input_mask'].shape)\r\n","print('Input Mask     : ', text_preprocessed['input_mask'][0, :16])\r\n","print('Shape Type Ids : ', text_preprocessed['input_type_ids'].shape)\r\n","print('Type Ids       : ', text_preprocessed['input_type_ids'][0, :16])"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"2QOHjBofatrO"},"outputs":[],"source":["tf.keras.utils.plot_model(test_preprocess_model)"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"AGIZ-_SQbDMQ"},"outputs":[],"source":["AUTOTUNE = tf.data.AUTOTUNE\r\n","\r\n","def load_datasets_from_tf_datasets(in_memory_dataset, info, split, batch_size, \r\n","                                   bert_preprocess_model):\r\n","    is_training = split.startswith(\"train\")\r\n","    dataset = tf.data.Dataset.from_tensor_slices(in_memory_dataset[split])\r\n","    num_examples = info.splits[split].num_examples\r\n","\r\n","    if is_training:\r\n","        daataset = dataset.shuffle(num_examples)\r\n","        dataset = dataset.repeat()\r\n","\r\n","    dataset = dataset.batch(batch_size)\r\n","    dataset = dataset.map(lambda d: (bert_preprocess_model(d), d['label']))\r\n","    dataset = dataset.cache().prefetch(buffer_size=AUTOTUNE)\r\n","    return dataset, num_examples\r\n","\r\n"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"nWu9BaYycVWe"},"outputs":[],"source":["def build_classifier_model(num_classes):\r\n","    inputs = dict(\r\n","        input_word_ids=tf.keras.layers.Input(shape=(None, ), dtype=tf.int32),\r\n","        input_mask=tf.keras.layers.Input(shape=(None, ), dtype=tf.int32),\r\n","        input_type_ids=tf.keras.layers.Input(shape=(None, ), dtype=tf.int32),\r\n","    )\r\n","\r\n","    encoder = hub.KerasLayer(tfhub_handle_encoder, trainable=True, name='encoder')\r\n","    net = encoder(inputs)['pooled_output']\r\n","    net = tf.keras.layers.Dropout(rate=.1)(net)\r\n","    net = tf.keras.layers.Dense(num_classes, activation=None, name=\"classifier\")(net)\r\n","    return tf.keras.Model(inputs, net, name='prediction')\r\n","    "]},{"cell_type":"code","execution_count":null,"metadata":{"colab":{"background_save":true},"id":"G-4Zj0_3ju-4"},"outputs":[{"name":"stdout","output_type":"stream","text":["WARNING:tensorflow:9 out of the last 10 calls to \u003cfunction recreate_function.\u003clocals\u003e.restored_function_body at 0x7f430ce9b200\u003e triggered tf.function retracing. Tracing is expensive and the excessive number of tracings could be due to (1) creating @tf.function repeatedly in a loop, (2) passing tensors with different shapes, (3) passing Python objects instead of tensors. For (1), please define your @tf.function outside of the loop. For (2), @tf.function has experimental_relax_shapes=True option that relaxes argument shapes that can avoid unnecessary retracing. For (3), please refer to https://www.tensorflow.org/guide/function#controlling_retracing and https://www.tensorflow.org/api_docs/python/tf/function for  more details.\n"]},{"name":"stderr","output_type":"stream","text":["WARNING:tensorflow:9 out of the last 10 calls to \u003cfunction recreate_function.\u003clocals\u003e.restored_function_body at 0x7f430ce9b200\u003e triggered tf.function retracing. Tracing is expensive and the excessive number of tracings could be due to (1) creating @tf.function repeatedly in a loop, (2) passing tensors with different shapes, (3) passing Python objects instead of tensors. For (1), please define your @tf.function outside of the loop. For (2), @tf.function has experimental_relax_shapes=True option that relaxes argument shapes that can avoid unnecessary retracing. For (3), please refer to https://www.tensorflow.org/guide/function#controlling_retracing and https://www.tensorflow.org/api_docs/python/tf/function for  more details.\n"]},{"name":"stdout","output_type":"stream","text":["tf.Tensor([[0.6147511 0.8184364]], shape=(1, 2), dtype=float32)\n"]}],"source":["test_classifier_model = build_classifier_model(2)\r\n","bert_raw_result = test_classifier_model(text_preprocessed)\r\n","print(tf.sigmoid(bert_raw_result))"]},{"cell_type":"code","execution_count":null,"metadata":{"colab":{"background_save":true},"id":"ZvUOjMKGkKWA"},"outputs":[{"data":{"image/png":"\n","text/plain":["\u003cIPython.core.display.Image object\u003e"]},"execution_count":null,"metadata":{},"output_type":"execute_result"}],"source":["tf.keras.utils.plot_model(test_classifier_model)"]},{"cell_type":"code","execution_count":null,"metadata":{"colab":{"background_save":true},"id":"eHhrqrV6kH3y"},"outputs":[{"name":"stdout","output_type":"stream","text":["Using glue/cola from TFDS\n","This dataset has 10657 examples\n","Number of classes: 2\n","Features ['sentence']\n","Splits ['test', 'train', 'validation']\n","\u001b[1mDownloading and preparing dataset 368.14 KiB (download: 368.14 KiB, generated: Unknown size, total: 368.14 KiB) to /root/tensorflow_datasets/glue/cola/1.0.0...\u001b[0m\n"]},{"data":{"application/vnd.jupyter.widget-view+json":{"model_id":"008ef4679b8b44ac9ead55eac5a0004c","version_major":2,"version_minor":0},"text/plain":["HBox(children=(FloatProgress(value=1.0, bar_style='info', description='Dl Completed...', max=1.0, style=Progre…"]},"metadata":{},"output_type":"display_data"},{"data":{"application/vnd.jupyter.widget-view+json":{"model_id":"f1f1ff032c134b338bdda797501dd5f4","version_major":2,"version_minor":0},"text/plain":["HBox(children=(FloatProgress(value=1.0, bar_style='info', description='Dl Size...', max=1.0, style=ProgressSty…"]},"metadata":{},"output_type":"display_data"},{"data":{"application/vnd.jupyter.widget-view+json":{"model_id":"200477f1799845acbaa910c910084890","version_major":2,"version_minor":0},"text/plain":["HBox(children=(FloatProgress(value=1.0, bar_style='info', description='Extraction completed...', max=1.0, styl…"]},"metadata":{},"output_type":"display_data"},{"name":"stdout","output_type":"stream","text":["\n","\n","\n","\n","\n","\n"]},{"data":{"application/vnd.jupyter.widget-view+json":{"model_id":"51730fd73e7a46f8a211e69d60406b19","version_major":2,"version_minor":0},"text/plain":["HBox(children=(FloatProgress(value=0.0, description='Generating splits...', max=3.0, style=ProgressStyle(descr…"]},"metadata":{},"output_type":"display_data"},{"data":{"application/vnd.jupyter.widget-view+json":{"model_id":"9ddb7c768a9d4f9591c1e1b9c779c7ed","version_major":2,"version_minor":0},"text/plain":["HBox(children=(FloatProgress(value=0.0, description='Generating train examples...', max=8551.0, style=Progress…"]},"metadata":{},"output_type":"display_data"},{"data":{"application/vnd.jupyter.widget-view+json":{"model_id":"442a39a436364f11a22f75734b7df2af","version_major":2,"version_minor":0},"text/plain":["HBox(children=(FloatProgress(value=0.0, description='Shuffling glue-train.tfrecord...', max=8551.0, style=Prog…"]},"metadata":{},"output_type":"display_data"},{"data":{"application/vnd.jupyter.widget-view+json":{"model_id":"9f09118a68814ca3b0453f4a746c459a","version_major":2,"version_minor":0},"text/plain":["HBox(children=(FloatProgress(value=0.0, description='Generating validation examples...', max=1043.0, style=Pro…"]},"metadata":{},"output_type":"display_data"},{"data":{"application/vnd.jupyter.widget-view+json":{"model_id":"57ce588cc8ff434dbb922db1bc1a96a1","version_major":2,"version_minor":0},"text/plain":["HBox(children=(FloatProgress(value=0.0, description='Shuffling glue-validation.tfrecord...', max=1043.0, style…"]},"metadata":{},"output_type":"display_data"},{"data":{"application/vnd.jupyter.widget-view+json":{"model_id":"94d791e3a0444a4482ae4228dcce9706","version_major":2,"version_minor":0},"text/plain":["HBox(children=(FloatProgress(value=0.0, description='Generating test examples...', max=1063.0, style=ProgressS…"]},"metadata":{},"output_type":"display_data"},{"data":{"application/vnd.jupyter.widget-view+json":{"model_id":"5ec035a28285416c9042843e69b09b4d","version_major":2,"version_minor":0},"text/plain":["HBox(children=(FloatProgress(value=0.0, description='Shuffling glue-test.tfrecord...', max=1063.0, style=Progr…"]},"metadata":{},"output_type":"display_data"},{"name":"stdout","output_type":"stream","text":["\r\u001b[1mDataset glue downloaded and prepared to /root/tensorflow_datasets/glue/cola/1.0.0. Subsequent calls will reuse this data.\u001b[0m\n","Here are some sample rows from glue/cola dataset\n","['unacceptable', 'acceptable']\n","\n","sample row 1\n","b'It is this hat that it is certain that he was wearing.'\n","label: 1 (acceptable)\n","\n","sample row 2\n","b'Her efficient looking up of the answer pleased the boss.'\n","label: 1 (acceptable)\n","\n","sample row 3\n","b'Both the workers will wear carnations.'\n","label: 1 (acceptable)\n","\n","sample row 4\n","b'John enjoyed drawing trees for his syntax homework.'\n","label: 1 (acceptable)\n","\n","sample row 5\n","b'We consider Leslie rather foolish, and Lou a complete idiot.'\n","label: 1 (acceptable)\n","\n"]}],"source":["tfds_name = 'glue/cola' \r\n","\r\n","tfds_info = tfds.builder(tfds_name).info\r\n","\r\n","sentence_features = list(tfds_info.features.keys())\r\n","sentence_features.remove('idx')\r\n","sentence_features.remove('label')\r\n","\r\n","available_splits = list(tfds_info.splits.keys())\r\n","train_split = 'train'\r\n","validation_split = 'validation'\r\n","test_split = 'test'\r\n","if tfds_name == 'glue/mnli':\r\n","  validation_split = 'validation_matched'\r\n","  test_split = 'test_matched'\r\n","\r\n","num_classes = tfds_info.features['label'].num_classes\r\n","num_examples = tfds_info.splits.total_num_examples\r\n","\r\n","print(f'Using {tfds_name} from TFDS')\r\n","print(f'This dataset has {num_examples} examples')\r\n","print(f'Number of classes: {num_classes}')\r\n","print(f'Features {sentence_features}')\r\n","print(f'Splits {available_splits}')\r\n","\r\n","with tf.device('/job:localhost'):\r\n","  # batch_size=-1 is a way to load the dataset into memory\r\n","  in_memory_ds = tfds.load(tfds_name, batch_size=-1, shuffle_files=True)\r\n","\r\n","# The code below is just to show some samples from the selected dataset\r\n","print(f'Here are some sample rows from {tfds_name} dataset')\r\n","sample_dataset = tf.data.Dataset.from_tensor_slices(in_memory_ds[train_split])\r\n","\r\n","labels_names = tfds_info.features['label'].names\r\n","print(labels_names)\r\n","print()\r\n","\r\n","sample_i = 1\r\n","for sample_row in sample_dataset.take(5):\r\n","  samples = [sample_row[feature] for feature in sentence_features]\r\n","  print(f'sample row {sample_i}')\r\n","  for sample in samples:\r\n","    print(sample.numpy())\r\n","  sample_label = sample_row['label']\r\n","\r\n","  print(f'label: {sample_label} ({labels_names[sample_label]})')\r\n","  print()\r\n","  sample_i += 1"]},{"cell_type":"code","execution_count":null,"metadata":{"colab":{"background_save":true},"id":"1-X2EbBfk_d8"},"outputs":[],"source":["def get_conf(glue_task):\r\n","    loss = tf.keras.losses.SparseCategoricalCrossentropy(from_logits=True)\r\n","\r\n","    if glue_task is 'glue/cola':\r\n","        metrics = tfa.metrics.MatthewsCorrelationCoefficient()\r\n","    else:\r\n","        metrics = tf.keras.metrics.SparseCategoricalCrossentropy('accuracy', dtype=tf.float32)\r\n","    \r\n","    return metrics, loss"]},{"cell_type":"code","execution_count":null,"metadata":{"colab":{"background_save":true},"id":"NH2tVsO1mBeh"},"outputs":[{"name":"stdout","output_type":"stream","text":["Fine tune model\n","WARNING:tensorflow:10 out of the last 11 calls to \u003cfunction recreate_function.\u003clocals\u003e.restored_function_body at 0x7f434c4ee5f0\u003e triggered tf.function retracing. Tracing is expensive and the excessive number of tracings could be due to (1) creating @tf.function repeatedly in a loop, (2) passing tensors with different shapes, (3) passing Python objects instead of tensors. For (1), please define your @tf.function outside of the loop. For (2), @tf.function has experimental_relax_shapes=True option that relaxes argument shapes that can avoid unnecessary retracing. For (3), please refer to https://www.tensorflow.org/guide/function#controlling_retracing and https://www.tensorflow.org/api_docs/python/tf/function for  more details.\n"]},{"name":"stderr","output_type":"stream","text":["WARNING:tensorflow:10 out of the last 11 calls to \u003cfunction recreate_function.\u003clocals\u003e.restored_function_body at 0x7f434c4ee5f0\u003e triggered tf.function retracing. Tracing is expensive and the excessive number of tracings could be due to (1) creating @tf.function repeatedly in a loop, (2) passing tensors with different shapes, (3) passing Python objects instead of tensors. For (1), please define your @tf.function outside of the loop. For (2), @tf.function has experimental_relax_shapes=True option that relaxes argument shapes that can avoid unnecessary retracing. For (3), please refer to https://www.tensorflow.org/guide/function#controlling_retracing and https://www.tensorflow.org/api_docs/python/tf/function for  more details.\n"]},{"name":"stdout","output_type":"stream","text":["WARNING:tensorflow:10 out of the last 11 calls to \u003cfunction recreate_function.\u003clocals\u003e.restored_function_body at 0x7f434c4eed40\u003e triggered tf.function retracing. Tracing is expensive and the excessive number of tracings could be due to (1) creating @tf.function repeatedly in a loop, (2) passing tensors with different shapes, (3) passing Python objects instead of tensors. For (1), please define your @tf.function outside of the loop. For (2), @tf.function has experimental_relax_shapes=True option that relaxes argument shapes that can avoid unnecessary retracing. For (3), please refer to https://www.tensorflow.org/guide/function#controlling_retracing and https://www.tensorflow.org/api_docs/python/tf/function for  more details.\n"]},{"name":"stderr","output_type":"stream","text":["WARNING:tensorflow:10 out of the last 11 calls to \u003cfunction recreate_function.\u003clocals\u003e.restored_function_body at 0x7f434c4eed40\u003e triggered tf.function retracing. Tracing is expensive and the excessive number of tracings could be due to (1) creating @tf.function repeatedly in a loop, (2) passing tensors with different shapes, (3) passing Python objects instead of tensors. For (1), please define your @tf.function outside of the loop. For (2), @tf.function has experimental_relax_shapes=True option that relaxes argument shapes that can avoid unnecessary retracing. For (3), please refer to https://www.tensorflow.org/guide/function#controlling_retracing and https://www.tensorflow.org/api_docs/python/tf/function for  more details.\n","/usr/local/lib/python3.7/dist-packages/tensorflow/python/keras/engine/functional.py:595: UserWarning: Input dict contained keys ['idx', 'label'] which did not match any model input. They will be ignored by the model.\n","  [n for n in tensors.keys() if n not in ref_input_names])\n"]},{"name":"stdout","output_type":"stream","text":["Epoch 1/5\n"]},{"name":"stderr","output_type":"stream","text":["/usr/local/lib/python3.7/dist-packages/tensorflow/python/framework/indexed_slices.py:437: UserWarning: Converting sparse IndexedSlices(IndexedSlices(indices=Tensor(\"AdamWeightDecay/gradients/StatefulPartitionedCall:1\", shape=(None,), dtype=int32), values=Tensor(\"clip_by_global_norm/clip_by_global_norm/_0:0\", dtype=float32), dense_shape=Tensor(\"AdamWeightDecay/gradients/StatefulPartitionedCall:2\", shape=(None,), dtype=int32))) to a dense Tensor of unknown shape. This may consume a large amount of memory.\n","  \"shape. This may consume a large amount of memory.\" % value)\n"]},{"name":"stdout","output_type":"stream","text":["267/267 [==============================] - 95s 119ms/step - loss: 0.5787 - accuracy: 2.0489 - val_loss: 0.4717 - val_accuracy: 2.5897\n","Epoch 2/5\n","267/267 [==============================] - 26s 98ms/step - loss: 0.4100 - accuracy: 2.0844 - val_loss: 0.5298 - val_accuracy: 2.7222\n","Epoch 3/5\n","267/267 [==============================] - 26s 99ms/step - loss: 0.2684 - accuracy: 1.2978 - val_loss: 0.5427 - val_accuracy: 2.5348\n","Epoch 4/5\n","267/267 [==============================] - 26s 99ms/step - loss: 0.1942 - accuracy: 0.8980 - val_loss: 0.7042 - val_accuracy: 2.6659\n","Epoch 5/5\n","267/267 [==============================] - 26s 99ms/step - loss: 0.1364 - accuracy: 0.5815 - val_loss: 0.7838 - val_accuracy: 2.7481\n"]}],"source":["epochs = 5\r\n","batch_size = 32\r\n","init_lr = 2e-5\r\n","\r\n","print(f'Fine tune model')\r\n","bert_preprocess_model = build_bert_preprocess_model(sentence_features=sentence_features)\r\n","\r\n","with strategy.scope():\r\n","\r\n","    # Need to be create inside scope\r\n","    metrics, loss = get_conf(tfds_name)\r\n","\r\n","    train_dataset, train_data_size = load_datasets_from_tf_datasets(in_memory_ds, tfds_info, train_split,\r\n","                                                                    batch_size=batch_size, bert_preprocess_model=bert_preprocess_model)\r\n","    steps_per_epoch = train_data_size // batch_size\r\n","    num_train_steps = steps_per_epoch * epochs\r\n","    num_warmup_steps = num_train_steps // 10\r\n","\r\n","    validation_dataset, validation_data_size = load_datasets_from_tf_datasets(\r\n","        in_memory_ds, tfds_info, validation_split, batch_size, bert_preprocess_model\r\n","    )\r\n","\r\n","    validation_steps = validation_data_size // batch_size\r\n","\r\n","    classifier_model = build_classifier_model(num_classes)\r\n","\r\n","    optimizer = optimization.create_optimizer(init_lr, num_train_steps, num_warmup_steps, optimizer_type='adamw')\r\n","\r\n","    classifier_model.compile(optimizer=optimizer, loss=loss, metrics=[metrics])\r\n","\r\n","    classifier_model.fit(\r\n","        x=train_dataset,\r\n","        validation_data=validation_dataset,\r\n","        steps_per_epoch=steps_per_epoch,\r\n","        epochs=epochs,\r\n","        validation_steps=validation_steps\r\n","    )\r\n","\r\n"]},{"cell_type":"code","execution_count":null,"metadata":{"colab":{"background_save":true},"id":"8p-Z5WJauJS6"},"outputs":[{"name":"stdout","output_type":"stream","text":["Saving ./my_bert_model/glue-cola_bert_en_uncased_L-12_H-768_A-12\n"]},{"name":"stderr","output_type":"stream","text":["WARNING:absl:Found untraced functions such as restored_function_body, restored_function_body, restored_function_body, restored_function_body, restored_function_body while saving (showing 5 of 910). These functions will not be directly callable after loading.\n","WARNING:absl:Found untraced functions such as restored_function_body, restored_function_body, restored_function_body, restored_function_body, restored_function_body while saving (showing 5 of 910). These functions will not be directly callable after loading.\n"]},{"name":"stdout","output_type":"stream","text":["INFO:tensorflow:Assets written to: ./my_bert_model/glue-cola_bert_en_uncased_L-12_H-768_A-12/assets\n"]},{"name":"stderr","output_type":"stream","text":["INFO:tensorflow:Assets written to: ./my_bert_model/glue-cola_bert_en_uncased_L-12_H-768_A-12/assets\n"]}],"source":["main_save_path = \"./my_bert_model\"\r\n","bert_type = tfhub_handle_encoder.split('/')[-2]\r\n","saved_model_name = f'{tfds_name.replace(\"/\", \"-\")}_{bert_type}'\r\n","\r\n","saved_model_path = os.path.join(main_save_path, saved_model_name)\r\n","\r\n","preprocess_inputs = bert_preprocess_model.inputs\r\n","bert_encoder_inputs = bert_preprocess_model(preprocess_inputs)\r\n","bert_outputs = classifier_model(bert_encoder_inputs)\r\n","model_export = tf.keras.Model(preprocess_inputs, bert_outputs)\r\n","\r\n","print(f'Saving {saved_model_path}')\r\n","\r\n","save_options = tf.saved_model.SaveOptions(experimental_io_device=\"/job:localhost\")\r\n","model_export.save(saved_model_path, include_optimizer=False, options=save_options)"]},{"cell_type":"code","execution_count":null,"metadata":{"colab":{"background_save":true},"id":"qFh56PO5vuCk"},"outputs":[{"name":"stdout","output_type":"stream","text":["WARNING:tensorflow:10 out of the last 11 calls to \u003cfunction recreate_function.\u003clocals\u003e.restored_function_body at 0x7f42f8c3edd0\u003e triggered tf.function retracing. Tracing is expensive and the excessive number of tracings could be due to (1) creating @tf.function repeatedly in a loop, (2) passing tensors with different shapes, (3) passing Python objects instead of tensors. For (1), please define your @tf.function outside of the loop. For (2), @tf.function has experimental_relax_shapes=True option that relaxes argument shapes that can avoid unnecessary retracing. For (3), please refer to https://www.tensorflow.org/guide/function#controlling_retracing and https://www.tensorflow.org/api_docs/python/tf/function for  more details.\n"]},{"name":"stderr","output_type":"stream","text":["WARNING:tensorflow:10 out of the last 11 calls to \u003cfunction recreate_function.\u003clocals\u003e.restored_function_body at 0x7f42f8c3edd0\u003e triggered tf.function retracing. Tracing is expensive and the excessive number of tracings could be due to (1) creating @tf.function repeatedly in a loop, (2) passing tensors with different shapes, (3) passing Python objects instead of tensors. For (1), please define your @tf.function outside of the loop. For (2), @tf.function has experimental_relax_shapes=True option that relaxes argument shapes that can avoid unnecessary retracing. For (3), please refer to https://www.tensorflow.org/guide/function#controlling_retracing and https://www.tensorflow.org/api_docs/python/tf/function for  more details.\n"]},{"name":"stdout","output_type":"stream","text":["WARNING:tensorflow:10 out of the last 11 calls to \u003cfunction recreate_function.\u003clocals\u003e.restored_function_body at 0x7f42f8c3e8c0\u003e triggered tf.function retracing. Tracing is expensive and the excessive number of tracings could be due to (1) creating @tf.function repeatedly in a loop, (2) passing tensors with different shapes, (3) passing Python objects instead of tensors. For (1), please define your @tf.function outside of the loop. For (2), @tf.function has experimental_relax_shapes=True option that relaxes argument shapes that can avoid unnecessary retracing. For (3), please refer to https://www.tensorflow.org/guide/function#controlling_retracing and https://www.tensorflow.org/api_docs/python/tf/function for  more details.\n"]},{"name":"stderr","output_type":"stream","text":["WARNING:tensorflow:10 out of the last 11 calls to \u003cfunction recreate_function.\u003clocals\u003e.restored_function_body at 0x7f42f8c3e8c0\u003e triggered tf.function retracing. Tracing is expensive and the excessive number of tracings could be due to (1) creating @tf.function repeatedly in a loop, (2) passing tensors with different shapes, (3) passing Python objects instead of tensors. For (1), please define your @tf.function outside of the loop. For (2), @tf.function has experimental_relax_shapes=True option that relaxes argument shapes that can avoid unnecessary retracing. For (3), please refer to https://www.tensorflow.org/guide/function#controlling_retracing and https://www.tensorflow.org/api_docs/python/tf/function for  more details.\n"]}],"source":["# Test model\r\n","with tf.device('/job:localhost'):\r\n","    reloaded_model = tf.saved_model.load(saved_model_path)"]},{"cell_type":"code","execution_count":null,"metadata":{"colab":{"background_save":true},"id":"A2IymmpbwSLP"},"outputs":[],"source":["def prepare(record):\r\n","  model_inputs = [[record[ft]] for ft in sentence_features]\r\n","  return model_inputs\r\n","\r\n","\r\n","def prepare_serving(record):\r\n","  model_inputs = {ft: record[ft] for ft in sentence_features}\r\n","  return model_inputs\r\n","\r\n","\r\n","def print_bert_results(test, bert_result, dataset_name):\r\n","\r\n","  bert_result_class = tf.argmax(bert_result, axis=1)[0]\r\n","\r\n","  if dataset_name == 'glue/cola':\r\n","    print(f'sentence: {test[0].numpy()}')\r\n","    if bert_result_class == 1:\r\n","      print(f'This sentence is acceptable')\r\n","    else:\r\n","      print(f'This sentence is unacceptable')\r\n","\r\n","  elif dataset_name == 'glue/sst2':\r\n","    print(f'sentence: {test[0]}')\r\n","    if bert_result_class == 1:\r\n","      print(f'This sentence has POSITIVE sentiment')\r\n","    else:\r\n","      print(f'This sentence has NEGATIVE sentiment')\r\n","\r\n","  elif dataset_name == 'glue/mrpc':\r\n","    print(f'sentence1: {test[0]}')\r\n","    print(f'sentence2: {test[1]}')\r\n","    if bert_result_class == 1:\r\n","      print(f'Are a paraphrase')\r\n","    else:\r\n","      print(f'Are NOT a paraphrase')\r\n","\r\n","  elif dataset_name == 'glue/qqp':\r\n","    print(f'question1: {test[0]}')\r\n","    print(f'question2: {test[1]}')\r\n","    if bert_result_class == 1:\r\n","      print(f'Questions are similar')\r\n","    else:\r\n","      print(f'Questions are NOT similar')\r\n","\r\n","  elif dataset_name == 'glue/mnli':\r\n","    print(f'premise   : {test[0]}')\r\n","    print(f'hypothesis: {test[1]}')\r\n","    if bert_result_class == 1:\r\n","      print(f'This premise is NEUTRAL to the hypothesis')\r\n","    elif bert_result_class == 2:\r\n","      print(f'This premise CONTRADICTS the hypothesis')\r\n","    else:\r\n","      print(f'This premise ENTAILS the hypothesis')\r\n","\r\n","  elif dataset_name == 'glue/qnli':\r\n","    print(f'question: {test[0]}')\r\n","    print(f'sentence: {test[1]}')\r\n","    if bert_result_class == 1:\r\n","      print(f'The question is NOT answerable by the sentence')\r\n","    else:\r\n","      print(f'The question is answerable by the sentence')\r\n","\r\n","  elif dataset_name == 'glue/rte':\r\n","    print(f'sentence1: {test[0]}')\r\n","    print(f'sentence2: {test[1]}')\r\n","    if bert_result_class == 1:\r\n","      print(f'Sentence1 DOES NOT entails sentence2')\r\n","    else:\r\n","      print(f'Sentence1 entails sentence2')\r\n","\r\n","  elif dataset_name == 'glue/wnli':\r\n","    print(f'sentence1: {test[0]}')\r\n","    print(f'sentence2: {test[1]}')\r\n","    if bert_result_class == 1:\r\n","      print(f'Sentence1 DOES NOT entails sentence2')\r\n","    else:\r\n","      print(f'Sentence1 entails sentence2')\r\n","\r\n","  print(f'Bert raw results:{bert_result[0]}')\r\n","  print()"]},{"cell_type":"code","execution_count":null,"metadata":{"colab":{"background_save":true},"id":"jCf7920cwTQx"},"outputs":[{"name":"stdout","output_type":"stream","text":["WARNING:tensorflow:10 out of the last 11 calls to \u003cfunction recreate_function.\u003clocals\u003e.restored_function_body at 0x7f42f8c2c170\u003e triggered tf.function retracing. Tracing is expensive and the excessive number of tracings could be due to (1) creating @tf.function repeatedly in a loop, (2) passing tensors with different shapes, (3) passing Python objects instead of tensors. For (1), please define your @tf.function outside of the loop. For (2), @tf.function has experimental_relax_shapes=True option that relaxes argument shapes that can avoid unnecessary retracing. For (3), please refer to https://www.tensorflow.org/guide/function#controlling_retracing and https://www.tensorflow.org/api_docs/python/tf/function for  more details.\n"]},{"name":"stderr","output_type":"stream","text":["WARNING:tensorflow:10 out of the last 11 calls to \u003cfunction recreate_function.\u003clocals\u003e.restored_function_body at 0x7f42f8c2c170\u003e triggered tf.function retracing. Tracing is expensive and the excessive number of tracings could be due to (1) creating @tf.function repeatedly in a loop, (2) passing tensors with different shapes, (3) passing Python objects instead of tensors. For (1), please define your @tf.function outside of the loop. For (2), @tf.function has experimental_relax_shapes=True option that relaxes argument shapes that can avoid unnecessary retracing. For (3), please refer to https://www.tensorflow.org/guide/function#controlling_retracing and https://www.tensorflow.org/api_docs/python/tf/function for  more details.\n"]},{"name":"stdout","output_type":"stream","text":["sentence: [b'I saw the astronomer with a telescope.']\n","This sentence is acceptable\n","Bert raw results:[-4.440919   2.7251322]\n","\n","sentence: [b'Somebody just left - guess who just left.']\n","This sentence is acceptable\n","Bert raw results:[-3.8689706  2.3567994]\n","\n","sentence: [b'Yes, too much so.']\n","This sentence is acceptable\n","Bert raw results:[-1.2051959   0.42129737]\n","\n","sentence: [b'I wonder who saw Bill and liked Mary.']\n","This sentence is acceptable\n","Bert raw results:[-3.1723185  1.8008618]\n","\n","sentence: [b'Which man drove the car?']\n","This sentence is acceptable\n","Bert raw results:[-3.6100965  2.2806292]\n","\n"]}],"source":["with tf.device('/job:localhost'):\r\n","    test_dataset = tf.data.Dataset.from_tensor_slices(in_memory_ds[test_split])\r\n","\r\n","    for row in test_dataset.shuffle(1000).map(prepare).take(5):\r\n","        if len(sentence_features) == 1:\r\n","            result = reloaded_model(row[0])\r\n","        else:\r\n","            result = reloaded_model(list(row))\r\n","        \r\n","        print_bert_results(row, result, tfds_name)"]},{"cell_type":"code","execution_count":null,"metadata":{"colab":{"background_save":true},"id":"xS5oMO9MxunV"},"outputs":[{"name":"stdout","output_type":"stream","text":["sentence: b\"The newspaper has reported that they are about to appoint someone, but I can't remember who.\"\n","This sentence is acceptable\n","Bert raw results:[-3.460811   2.2095237]\n","\n","sentence: b\"The administration has issued a statement that it is willing to meet with one of the student groups, but I'm not sure which one.\"\n","This sentence is acceptable\n","Bert raw results:[-2.5723596  1.5756365]\n","\n","sentence: b'Good cooks are made by them.'\n","This sentence is unacceptable\n","Bert raw results:[ 1.3139793 -1.2374688]\n","\n","sentence: b'John thinks for Bill to leave.'\n","This sentence is unacceptable\n","Bert raw results:[ 1.9551344 -1.5678914]\n","\n","sentence: b\"This pen doesn't write.\"\n","This sentence is acceptable\n","Bert raw results:[-3.2623603  2.148901 ]\n","\n"]}],"source":["with tf.device('/job:localhost'):\r\n","    serving_model = reloaded_model.signatures['serving_default']\r\n","    for test_row in test_dataset.shuffle(1000).map(prepare_serving).take(5):\r\n","        result = serving_model(**test_row)\r\n","        # The 'prediction' key is the classifier's defined model name.\r\n","        print_bert_results(list(test_row.values()), result['prediction'], tfds_name)"]},{"cell_type":"code","execution_count":null,"metadata":{"colab":{"background_save":true},"id":"BBJKXIQUwVl2"},"outputs":[{"name":"stdout","output_type":"stream","text":["  adding: content/my_bert_model/ (stored 0%)\n","  adding: content/my_bert_model/glue-cola_bert_en_uncased_L-12_H-768_A-12/ (stored 0%)\n","  adding: content/my_bert_model/glue-cola_bert_en_uncased_L-12_H-768_A-12/assets/ (stored 0%)\n","  adding: content/my_bert_model/glue-cola_bert_en_uncased_L-12_H-768_A-12/assets/vocab.txt (deflated 53%)\n","  adding: content/my_bert_model/glue-cola_bert_en_uncased_L-12_H-768_A-12/saved_model.pb (deflated 93%)\n","  adding: content/my_bert_model/glue-cola_bert_en_uncased_L-12_H-768_A-12/variables/ (stored 0%)\n","  adding: content/my_bert_model/glue-cola_bert_en_uncased_L-12_H-768_A-12/variables/variables.index (deflated 82%)\n","  adding: content/my_bert_model/glue-cola_bert_en_uncased_L-12_H-768_A-12/variables/variables.data-00000-of-00001 (deflated 19%)\n"]},{"data":{"application/javascript":["\n","    async function download(id, filename, size) {\n","      if (!google.colab.kernel.accessAllowed) {\n","        return;\n","      }\n","      const div = document.createElement('div');\n","      const label = document.createElement('label');\n","      label.textContent = `Downloading \"${filename}\": `;\n","      div.appendChild(label);\n","      const progress = document.createElement('progress');\n","      progress.max = size;\n","      div.appendChild(progress);\n","      document.body.appendChild(div);\n","\n","      const buffers = [];\n","      let downloaded = 0;\n","\n","      const channel = await google.colab.kernel.comms.open(id);\n","      // Send a message to notify the kernel that we're ready.\n","      channel.send({})\n","\n","      for await (const message of channel.messages) {\n","        // Send a message to notify the kernel that we're ready.\n","        channel.send({})\n","        if (message.buffers) {\n","          for (const buffer of message.buffers) {\n","            buffers.push(buffer);\n","            downloaded += buffer.byteLength;\n","            progress.value = downloaded;\n","          }\n","        }\n","      }\n","      const blob = new Blob(buffers, {type: 'application/binary'});\n","      const a = document.createElement('a');\n","      a.href = window.URL.createObjectURL(blob);\n","      a.download = filename;\n","      div.appendChild(a);\n","      a.click();\n","      div.remove();\n","    }\n","  "],"text/plain":["\u003cIPython.core.display.Javascript object\u003e"]},"metadata":{},"output_type":"display_data"},{"data":{"application/javascript":["download(\"download_fdcb885e-0dd2-48d2-9bd5-d135aa77fc5a\", \"download.zip\", 1068846269)"],"text/plain":["\u003cIPython.core.display.Javascript object\u003e"]},"metadata":{},"output_type":"display_data"}],"source":["!zip -r /content/download.zip /content/my_bert_model\r\n","\r\n","from google.colab import files\r\n","files.download('/content/download.zip')"]}],"metadata":{"accelerator":"TPU","colab":{"authorship_tag":"ABX9TyNqxbiI48QxBtG3vmyHIpY8","name":"BERT","version":""},"kernelspec":{"display_name":"Python 3","name":"python3"}},"nbformat":4,"nbformat_minor":0}